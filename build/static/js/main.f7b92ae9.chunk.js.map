{"version":3,"sources":["App.js","index.js"],"names":["ContractName","intToColor","c","toString","padStart","transparentColor","a","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","state","connected","signedIn","accountId","balance","numPixels","boardLoaded","selectedCell","currentColor","pickerColor","colors","map","toLowerCase","pickingColor","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","Math","trunc","offsetX","target","clientWidth","y","offsetY","clientHeight","cell","JSON","stringify","renderCanvas","pickColor","saveColor","drawPixel","document","altKey","slice","_contract","draw","Promise","all","refreshBoard","refreshAccountStats","console","log","concat","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","rewardPerMs","_pixelCost","setInterval","t","nearConfig","networkId","nodeUrl","contractName","walletUrl","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_nearConfig","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","ctx","j","p","fillStyle","fillRect","forEach","beginPath","strokeStyle","lineWidth","CellWidth","arc","PI","stroke","closePath","rect","requestSignIn","signOut","hsl","h","changeColor","newColor","index","indexOf","splice","rgb","r","g","b","content","className","onClick","logOut","toFixed","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","style","marginBottom","role","aria-hidden","ref","height","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f7b92ae9.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React from 'react';\r\n// import BN from 'bn.js';\r\nimport * as nearAPI from 'near-api-js'\r\nimport { HuePicker, GithubPicker } from 'react-color'\r\n\r\n// const OneNear = new BN(\"1000000000000000000000000\");\r\nconst ContractName = 'dev-1643257383437-89298919237572';\r\nconst BoardHeight = 50;\r\nconst BoardWidth = 50;\r\nconst NumLinesPerFetch = 10;\r\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\r\nconst CellWidth = 16;\r\nconst CellHeight = 16;\r\nconst MaxNumColors = 31;\r\nconst BatchOfPixels = 10;\r\n// 500 ms\r\nconst BatchTimeout = 500;\r\nconst RefreshBoardTimeout = 1000;\r\nconst MaxWorkTime = 10 * 60 * 1000;\r\n\r\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\r\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\r\nconst generateGamma = (hue) => {\r\n  const gammaColors = [];\r\n  for (let i = 0; i < MaxNumColors; ++i) {\r\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\r\n  }\r\n  return gammaColors;\r\n};\r\nconst decodeLine = (line) => {\r\n  let buf = Buffer.from(line, 'base64');\r\n  if (buf.length !== ExpectedLineLength) {\r\n    throw new Error(\"Unexpected encoded line length\");\r\n  }\r\n  let pixels = []\r\n  for (let i = 4; i < buf.length; i += 8) {\r\n    let color = buf.readUInt32LE(i);\r\n    let ownerIndex = buf.readUInt32LE(i + 4);\r\n    pixels.push({\r\n      color,\r\n      ownerIndex,\r\n    })\r\n  }\r\n  return pixels;\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      connected: false,\r\n      signedIn: false,\r\n      accountId: null,\r\n      balance: 0.0,\r\n      numPixels: 0,\r\n      boardLoaded: false,\r\n      selectedCell: null,\r\n      currentColor: 0xff0000,\r\n      pickerColor: '#ff0000',\r\n      colors: [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase()),\r\n      gammaColors: generateGamma(0),\r\n      pickingColor: false,\r\n    };\r\n\r\n    this._balanceRefreshTimer = null;\r\n    this.canvasRef = React.createRef();\r\n    this._context = false;\r\n    this._lines = false;\r\n    this._queue = [];\r\n    this._pendingPixels = [];\r\n    this._refreshBoardTimer = null;\r\n    this._sendQueueTimer = null;\r\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\r\n\r\n    this._initNear().then(() => {\r\n      this.setState({\r\n        connected: true,\r\n        signedIn: !!this._accountId,\r\n        accountId: this._accountId,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvasRef.current;\r\n    this._context = canvas.getContext('2d');\r\n\r\n    canvas.addEventListener('mousemove', (e) => {\r\n      const x = Math.trunc(e.offsetX / e.target.clientWidth * BoardWidth);\r\n      const y = Math.trunc(e.offsetY / e.target.clientHeight * BoardWidth);\r\n      let cell = null;\r\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\r\n        cell = { x, y };\r\n      }\r\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\r\n        this.setState({\r\n          selectedCell: cell,\r\n        }, () => {\r\n          this.renderCanvas()\r\n        })\r\n      }\r\n    });\r\n\r\n    canvas.addEventListener('click', async (e) => {\r\n      if (this.state.selectedCell !== null) {\r\n        if (this.state.pickingColor) {\r\n          this.pickColor(this.state.selectedCell);\r\n        } else {\r\n          this.saveColor();\r\n          await this.drawPixel(this.state.selectedCell);\r\n        }\r\n      }\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n      e.altKey && this.setState({\r\n        pickingColor: true,\r\n      }, () => {\r\n        this.renderCanvas()\r\n      });\r\n    })\r\n    document.addEventListener('keyup', (e) => {\r\n      !e.altKey && this.setState({\r\n        pickingColor: false,\r\n      }, () => {\r\n        this.renderCanvas()\r\n      });\r\n    })\r\n  }\r\n\r\n  pickColor(cell) {\r\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\r\n      return;\r\n    }\r\n    const color = this._lines[cell.y][cell.x].color;\r\n\r\n    this.setState({\r\n      currentColor: color,\r\n      pickingColor: false,\r\n    }, () => {\r\n      this.renderCanvas()\r\n    });\r\n  }\r\n\r\n  async _sendQueue() {\r\n    const pixels = this._queue.slice(0, BatchOfPixels);\r\n    this._queue = this._queue.slice(BatchOfPixels);\r\n    this._pendingPixels = pixels;\r\n\r\n    try {\r\n      await this._contract.draw({\r\n        pixels\r\n      });\r\n      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\r\n    } catch (error) {\r\n      console.log(\"Failed to send a transaction\", error);\r\n      this._queue = this._queue.concat(this._pendingPixels);\r\n    }\r\n    this._pendingPixels = [];\r\n  }\r\n\r\n  async _pingQueue(ready) {\r\n    if (this._sendQueueTimer) {\r\n      clearTimeout(this._sendQueueTimer);\r\n      this._sendQueueTimer = null;\r\n    }\r\n\r\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\r\n      await this._sendQueue();\r\n    }\r\n    if (this._queue.length > 0) {\r\n      this._sendQueueTimer = setTimeout(async () => {\r\n        await this._pingQueue(true);\r\n      }, BatchTimeout);\r\n    }\r\n\r\n  }\r\n\r\n  async drawPixel(cell) {\r\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\r\n      return;\r\n    }\r\n\r\n    this._queue.push({\r\n      x: cell.x,\r\n      y: cell.y,\r\n      color: this.state.currentColor,\r\n    });\r\n\r\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\r\n    await this._pingQueue(false);\r\n  }\r\n\r\n  async refreshAccountStats() {\r\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\r\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\r\n    if (this._balanceRefreshTimer) {\r\n      clearInterval(this._balanceRefreshTimer);\r\n      this._balanceRefreshTimer = null;\r\n    }\r\n    const startTime = new Date().getTime();\r\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\r\n\r\n    this.setState({\r\n      balance: balance / this._pixelCost,\r\n      numPixels,\r\n    });\r\n\r\n    this._balanceRefreshTimer = setInterval(() => {\r\n      const t = new Date().getTime();\r\n      this.setState({\r\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost\r\n      })\r\n    }, 100);\r\n  }\r\n\r\n  async _initNear() {\r\n    const nearConfig = {\r\n      networkId: 'default',\r\n      nodeUrl: 'https://rpc.testnet.near.org',\r\n      contractName: ContractName,\r\n      walletUrl: 'https://wallet.testnet.near.org',\r\n    };\r\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\r\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\r\n    this._keyStore = keyStore;\r\n    this._nearConfig = nearConfig;\r\n    this._near = near;\r\n\r\n    this._walletConnection = new nearAPI.WalletConnection(near, ContractName);\r\n    this._accountId = this._walletConnection.getAccountId();\r\n\r\n    this._account = this._walletConnection.account();\r\n    this._contract = new nearAPI.Contract(this._account, ContractName, {\r\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\r\n      changeMethods: ['draw', 'buy_tokens'],\r\n    });\r\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\r\n    if (this._accountId) {\r\n      await this.refreshAccountStats();\r\n    }\r\n    this._lineVersions = Array(BoardHeight).fill(-1);\r\n    this._lines = Array(BoardHeight).fill(false);\r\n    await this.refreshBoard(true);\r\n  }\r\n\r\n  async refreshBoard(forced) {\r\n    if (this._refreshBoardTimer) {\r\n      clearTimeout(this._refreshBoardTimer);\r\n      this._refreshBoardTimer = null;\r\n    }\r\n    const t = new Date().getTime();\r\n    if (t < this._stopRefreshTime) {\r\n      this._refreshBoardTimer = setTimeout(async () => {\r\n        await this.refreshBoard(false);\r\n      }, RefreshBoardTimeout);\r\n    }\r\n\r\n    if (!forced && document.hidden) {\r\n      return;\r\n    }\r\n\r\n    let lineVersions = await this._contract.get_line_versions();\r\n    let needLines = [];\r\n    for (let i = 0; i < BoardHeight; ++i) {\r\n      if (lineVersions[i] !== this._lineVersions[i]) {\r\n        needLines.push(i);\r\n      }\r\n    }\r\n    let requestLines = []\r\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\r\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\r\n    }\r\n\r\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\r\n    results = results.flat();\r\n    requestLines = requestLines.flat();\r\n    for (let i = 0; i < requestLines.length; ++i) {\r\n      let lineIndex = requestLines[i];\r\n      let line = decodeLine(results[i]);\r\n      this._lines[lineIndex] = line;\r\n    }\r\n\r\n    this._lineVersions = lineVersions;\r\n    this.renderCanvas();\r\n  }\r\n\r\n  renderCanvas() {\r\n    if (!this._context || !this._lines) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this._context;\r\n\r\n    for (let i = 0; i < BoardHeight; ++i) {\r\n      const line = this._lines[i];\r\n      if (!line) {\r\n        continue;\r\n      }\r\n      for (let j = 0; j < BoardWidth; ++j) {\r\n        const p = line[j];\r\n        ctx.fillStyle = intToColor(p.color);\r\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\r\n      }\r\n    }\r\n\r\n    this._pendingPixels.concat(this._queue).forEach((p) => {\r\n      ctx.fillStyle = intToColor(p.color);\r\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\r\n    })\r\n\r\n    if (this.state.selectedCell) {\r\n      const c = this.state.selectedCell;\r\n      if (this.state.pickingColor) {\r\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\r\n        ctx.lineWidth = CellWidth * 4;\r\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\r\n        ctx.lineWidth = CellWidth * 2;\r\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n      } else {\r\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\r\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\r\n        ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\r\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\r\n        ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\r\n\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 3;\r\n        ctx.fillStyle = intToColor(this.state.currentColor);\r\n        ctx.strokeStyle = intToColor(this.state.currentColor);\r\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n      }\r\n    }\r\n\r\n    if (!this.state.boardLoaded) {\r\n      this.setState({\r\n        boardLoaded: true\r\n      })\r\n    }\r\n  }\r\n\r\n  async requestSignIn() {\r\n    const appTitle = 'NEAR Place';\r\n    await this._walletConnection.requestSignIn(\r\n        ContractName,\r\n        appTitle\r\n    )\r\n  }\r\n\r\n  async logOut() {\r\n    this._walletConnection.signOut();\r\n    this._accountId = null;\r\n    this.setState({\r\n      signedIn: !!this._accountId,\r\n      accountId: this._accountId,\r\n    })\r\n  }\r\n\r\n  hueColorChange(c) {\r\n    this.setState({\r\n      gammaColors: generateGamma(c.hsl.h)\r\n    })\r\n    this.changeColor(c)\r\n  }\r\n\r\n  saveColor() {\r\n    const newColor = intToColor(this.state.currentColor);\r\n    const index = this.state.colors.indexOf(newColor);\r\n    if (index >= 0) {\r\n      this.state.colors.splice(index, 1);\r\n    }\r\n    this.setState({\r\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\r\n    });\r\n  }\r\n\r\n  changeColor(c) {\r\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\r\n    this.setState({\r\n      pickerColor: c,\r\n      currentColor,\r\n    }, () => {\r\n      this.renderCanvas();\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const content = !this.state.connected ? (\r\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\r\n    ) : (this.state.signedIn ? (\r\n        <div>\r\n          <div className=\"float-right\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={() => this.logOut()}>Log out</button>\r\n          </div>\r\n          <h4>Hello, <span className=\"font-weight-bold\">{this.state.accountId}</span>!</h4>\r\n          <div>\r\n            PIXEL tokens: {this.state.balance.toFixed(6)}\r\n          </div>\r\n          <div>\r\n            Your pixels: {this.state.numPixels}\r\n          </div>\r\n          <div className=\"color-picker\">\r\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\r\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\r\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\r\n          </div>\r\n        </div>\r\n    ) : (\r\n        <div style={{marginBottom: \"10px\"}}>\r\n          <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\r\n        </div>\r\n    ));\r\n    return (\r\n      <div className=\"px-5\">\r\n        <h1>NEAR Place</h1>\r\n        {content}\r\n        <div>\r\n          <canvas ref={this.canvasRef}\r\n                  width={800}\r\n                  height={800}\r\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\r\n\r\n          </canvas>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}